/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface TripStorageInterface extends Interface {
  getFunction(
    nameOrSignature: "getTrip" | "storeTrip" | "tripCounter" | "trips"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TripStored"): EventFragment;

  encodeFunctionData(
    functionFragment: "getTrip",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storeTrip",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tripCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "trips", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "getTrip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeTrip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tripCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trips", data: BytesLike): Result;
}

export namespace TripStoredEvent {
  export type InputTuple = [
    tripId: BigNumberish,
    tripOwner: AddressLike,
    distance: string,
    startTime: BigNumberish,
    startLocation: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    tripId: bigint,
    tripOwner: string,
    distance: string,
    startTime: bigint,
    startLocation: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    tripId: bigint;
    tripOwner: string;
    distance: string;
    startTime: bigint;
    startLocation: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TripStorage extends BaseContract {
  connect(runner?: ContractRunner | null): TripStorage;
  waitForDeployment(): Promise<this>;

  interface: TripStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTrip: TypedContractMethod<
    [_tripId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        tripOwner: string;
        startLocation: string;
        endLocation: string;
        distance: string;
        avgRPM: string;
        avgSpeed: string;
        avgEngLoad: string;
        startTime: bigint;
        endTime: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  storeTrip: TypedContractMethod<
    [
      _startLocation: string,
      _endLocation: string,
      _distance: string,
      _avgRPM: string,
      _avgSpeed: string,
      _avgEngLoad: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  tripCounter: TypedContractMethod<[], [bigint], "view">;

  trips: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        tripId: bigint;
        tripOwner: string;
        startLocation: string;
        endLocation: string;
        distance: string;
        avgRPM: string;
        avgSpeed: string;
        avgEngLoad: string;
        startTime: bigint;
        endTime: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTrip"
  ): TypedContractMethod<
    [_tripId: BigNumberish],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        tripOwner: string;
        startLocation: string;
        endLocation: string;
        distance: string;
        avgRPM: string;
        avgSpeed: string;
        avgEngLoad: string;
        startTime: bigint;
        endTime: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "storeTrip"
  ): TypedContractMethod<
    [
      _startLocation: string,
      _endLocation: string,
      _distance: string,
      _avgRPM: string,
      _avgSpeed: string,
      _avgEngLoad: string,
      _startTime: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tripCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trips"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        tripId: bigint;
        tripOwner: string;
        startLocation: string;
        endLocation: string;
        distance: string;
        avgRPM: string;
        avgSpeed: string;
        avgEngLoad: string;
        startTime: bigint;
        endTime: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TripStored"
  ): TypedContractEvent<
    TripStoredEvent.InputTuple,
    TripStoredEvent.OutputTuple,
    TripStoredEvent.OutputObject
  >;

  filters: {
    "TripStored(uint256,address,string,uint256,string,uint256)": TypedContractEvent<
      TripStoredEvent.InputTuple,
      TripStoredEvent.OutputTuple,
      TripStoredEvent.OutputObject
    >;
    TripStored: TypedContractEvent<
      TripStoredEvent.InputTuple,
      TripStoredEvent.OutputTuple,
      TripStoredEvent.OutputObject
    >;
  };
}
